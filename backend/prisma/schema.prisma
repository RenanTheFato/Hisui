generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum AssetType {
  STOCK
  CRYPTO
}

enum Action {
  BUY
  SELL
}

model Users {
  id                         String    @id @default(uuid())
  email                      String    @unique
  password_hash              String
  username                   String
  role                       Role      @default(USER)
  is_verified                Boolean   @default(false)
  verification_token         String?   @unique
  verification_token_expires DateTime?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  portfolios Portfolio[]
  orders     Orders[]

  @@map("users")
}

model Portfolio {
  id          String  @id @default(uuid())
  name        String
  description String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user_id String
  user    Users   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  orders Orders[]

  @@index([user_id])
  @@map("portfolio")
}

model Stocks {
  id           String @id @default(uuid())
  name         String
  ticker       String @unique
  sector       String
  company_name String
  country      String
  exchange     String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  orders Orders[] @relation("StockOrders")

  @@index([ticker])
  @@index([sector])
  @@map("stocks")
}

model Cryptos {
  id         String  @id @default(uuid())
  name       String
  ticker     String  @unique
  blockchain String
  protocol   String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  orders Orders[] @relation("CryptoOrders")

  @@index([ticker])
  @@index([blockchain])
  @@map("cryptos")
}

model Orders {
  id                   String   @id @default(uuid())
  action               Action
  order_price          Decimal  @db.Decimal(10, 2)
  order_currency       String
  amount               Decimal  @db.Decimal(16, 8)
  order_execution_date DateTime

  tax_amount           Decimal? @db.Decimal(10, 2)
  fees                 Decimal? @db.Decimal(10, 2)

  asset_type   AssetType
  asset_ticker String

  stock  Stocks?  @relation("StockOrders", fields: [asset_ticker], references: [ticker], onDelete: Cascade, map: "stock_order")
  crypto Cryptos? @relation("CryptoOrders", fields: [asset_ticker], references: [ticker], onDelete: Cascade, map: "crypto_order")

  user_id String
  user    Users   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  portfolio_id String
  portfolio    Portfolio @relation(fields: [portfolio_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id, action, order_execution_date])
  @@index([portfolio_id, asset_ticker])
  @@index([asset_type, asset_ticker, action])
  @@index([order_execution_date])
  @@map("orders")
}
